{"version":3,"sources":["collection/display/EntryCard.tsx","collection/model/Taxonomy.ts","collection/display/EntryCardStack.tsx","collection/display/GroupedCollection.tsx","utilities/StringUtilities.ts","collection/controls/GroupLevelSlider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EntryCard","props","entry","siteTextStyles","root","color","fontWeight","FontWeights","semibold","descriptionTextStyles","regular","Card","aria-label","horizontal","onClick","console","log","tokens","childrenMargin","Item","fill","Image","src","alt","Section","Text","variant","styles","name","id","JSON","stringify","taxonomy","undefined","TaxonomyLevels","EntryCardStack","groupLevel","entries","level","value","parentTaxa","map","l","values","e","filter","index","self","indexOf","_","t","style","length","Stack","wrap","childrenGap","GroupedCollection","groups","g","groupName","convertToTitleCase","str","split","word","toUpperCase","substr","toLowerCase","join","GroupLevelSlider","selectedLevel","setSelectedLevel","getLevelFromValue","className","width","Slider","label","min","max","defaultValue","valueFormat","showValue","snapToStep","onChange","paddingLeft","horizontalAlign","App","React","selectedGroupLevel","setSelectedGroupLevel","kingdom","phylum","class","order","family","genus","species","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a548292b.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Card } from \"@uifabric/react-cards\";\r\nimport { FontWeights, Image, Text, ITextStyles } from \"@fluentui/react\";\r\nimport EntryData from \"../model/EntryData\";\r\n\r\ninterface EntryCardProps {\r\n  entry: EntryData;\r\n}\r\n\r\nconst EntryCard = (props: EntryCardProps) => {\r\n  const { entry } = props;\r\n\r\n  const siteTextStyles: ITextStyles = {\r\n    root: {\r\n      color: \"#025F52\",\r\n      fontWeight: FontWeights.semibold,\r\n    },\r\n  };\r\n  const descriptionTextStyles: ITextStyles = {\r\n    root: {\r\n      color: \"#333333\",\r\n      fontWeight: FontWeights.regular,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      aria-label=\"Clickable horizontal card \"\r\n      horizontal\r\n      onClick={() => {\r\n        console.log(\"Clicked\");\r\n      }}\r\n      tokens={{ childrenMargin: 12 }}\r\n    >\r\n      <Card.Item fill>\r\n        <Image src=\"https://placehold.it/180x135\" alt=\"Placeholder image.\" />\r\n      </Card.Item>\r\n      <Card.Section>\r\n        <Text variant=\"medium\" styles={siteTextStyles}>\r\n          {entry.name}\r\n        </Text>\r\n        <Text styles={descriptionTextStyles}>\r\n          <pre id=\"json\">{JSON.stringify(entry.taxonomy, undefined, 2)}</pre>\r\n        </Text>\r\n      </Card.Section>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EntryCard;\r\n","export interface Taxonomy {\r\n  kingdom: string;\r\n  phylum?: string;\r\n  class?: string;\r\n  order?: string;\r\n  family?: string;\r\n  genus?: string;\r\n  species?: string;\r\n}\r\n\r\nexport type TaxonomyLevel = keyof Taxonomy;\r\n\r\n// There may be a better way to automatically sync this with the keys of\r\n// Taxonomy above, but this will work for now.\r\nexport const TaxonomyLevels: TaxonomyLevel[] = [\r\n  \"kingdom\",\r\n  \"phylum\",\r\n  \"class\",\r\n  \"order\",\r\n  \"family\",\r\n  \"genus\",\r\n  \"species\",\r\n];\r\n","import * as React from \"react\";\r\nimport EntryCard from \"./EntryCard\";\r\nimport EntryData from \"../model/EntryData\";\r\nimport { Stack } from \"@fluentui/react/lib/Stack\";\r\nimport { FontWeights, Image, Text, ITextStyles } from \"@fluentui/react\";\r\nimport { TaxonomyLevel, TaxonomyLevels } from \"../model/Taxonomy\";\r\n\r\ninterface EntryCardStackProps {\r\n  groupLevel: { level: TaxonomyLevel; value: string };\r\n  entries: EntryData[];\r\n}\r\n\r\nconst EntryCardStack = (props: EntryCardStackProps) => {\r\n  const { groupLevel, entries } = props;\r\n  const { level, value } = groupLevel;\r\n\r\n  const parentTaxa = TaxonomyLevels.map((l) => ({\r\n    level: l,\r\n    values: entries\r\n      .map((e) => e.taxonomy[l])\r\n      .filter((value, index, self) => self.indexOf(value) === index),\r\n  })).filter((_, index) => TaxonomyLevels.indexOf(level) > index);\r\n\r\n  return (\r\n    <div>\r\n      {parentTaxa.map((t) => (\r\n        <Text variant=\"mediumPlus\" style={{ color: \"#4C4A48\" }}>{`${\r\n          t.values.length === 1 ? t.values[0] : \"...\"\r\n        } > `}</Text>\r\n      ))}\r\n      <span style={{ fontWeight: \"bold\" }}>{value}</span>\r\n      <Stack horizontal wrap tokens={{ childrenGap: 10 }}>\r\n        {entries.map((e) => (\r\n          <EntryCard entry={e} />\r\n        ))}\r\n      </Stack>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EntryCardStack;\r\n","import { Stack } from \"@fluentui/react/lib/Stack\";\r\nimport * as React from \"react\";\r\nimport EntryCardStack from \"./EntryCardStack\";\r\nimport EntryData from \"../model/EntryData\";\r\nimport EntryDataGroup from \"../model/EntryDataGroup\";\r\nimport { TaxonomyLevel } from \"../model/Taxonomy\";\r\n\r\ninterface GroupedCollectionProps {\r\n  entries: EntryData[];\r\n  groupLevel: TaxonomyLevel;\r\n}\r\n\r\nconst GroupedCollection = (\r\n  props: GroupedCollectionProps\r\n): React.ReactElement => {\r\n  const { entries, groupLevel } = props;\r\n\r\n  // Get unique entry values for that group and bundle associated entries\r\n  const groups: EntryDataGroup[] = entries\r\n    .map((e) => e.taxonomy[groupLevel])\r\n    .filter((value, index, self) => self.indexOf(value) === index)\r\n    .map((g) => ({\r\n      groupName: g || \"Not Specified\",\r\n      entries: entries.filter((e) => e.taxonomy[groupLevel] === g),\r\n    }));\r\n\r\n  return (\r\n    <Stack tokens={{ childrenGap: 10 }}>\r\n      {groups.map((g) => (\r\n        <EntryCardStack\r\n          entries={g.entries}\r\n          groupLevel={{ value: g.groupName, level: groupLevel }}\r\n        />\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default GroupedCollection;\r\n","export const convertToTitleCase = (str: string) => {\r\n  return (\r\n    str\r\n      // Split on spaces\r\n      .split(\" \")\r\n      // Capitalize the first letter of each word\r\n      .map((word) =>\r\n        word.length > 0\r\n          ? word[0].toUpperCase() + word.substr(1).toLowerCase()\r\n          : word\r\n      )\r\n      // Join capitalized words back into one string\r\n      .join(\" \")\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { Slider, Stack } from \"@fluentui/react\";\r\nimport { FontWeights, Text } from \"@fluentui/react\";\r\nimport { convertToTitleCase } from \"../../utilities/StringUtilities\";\r\nimport { TaxonomyLevel, TaxonomyLevels } from \"../model/Taxonomy\";\r\n\r\ninterface GroupLevelSliderProps {\r\n  selectedLevel: TaxonomyLevel;\r\n  setSelectedLevel: (newLevel: TaxonomyLevel) => void;\r\n}\r\n\r\nconst GroupLevelSlider = (props: GroupLevelSliderProps): React.ReactElement => {\r\n  const { selectedLevel, setSelectedLevel } = props;\r\n\r\n  const getValueForLevel = (level: TaxonomyLevel): number => {\r\n    return TaxonomyLevels.indexOf(level);\r\n  };\r\n  const getLevelFromValue = (value: number): TaxonomyLevel => {\r\n    return TaxonomyLevels[value];\r\n  };\r\n\r\n  const width = \"30em\";\r\n\r\n  return (\r\n    <>\r\n      <div className=\"groupLevelSliderContainer\" style={{ width }}>\r\n        <Slider\r\n          label=\"Grouping Level\"\r\n          min={0}\r\n          max={TaxonomyLevels.length - 1}\r\n          defaultValue={getValueForLevel(selectedLevel)}\r\n          valueFormat={(value) => convertToTitleCase(getLevelFromValue(value))}\r\n          showValue\r\n          snapToStep\r\n          onChange={(value: number) =>\r\n            setSelectedLevel(getLevelFromValue(value))\r\n          }\r\n          styles={{ root: { paddingLeft: \"0.1em\" } }}\r\n        />\r\n        <Stack\r\n          horizontal\r\n          horizontalAlign=\"space-between\"\r\n          style={{ paddingLeft: \"0.4em\" }}\r\n        >\r\n          {TaxonomyLevels.map((l) => (\r\n            <Stack.Item>\r\n              <Text styles={{ root: { fontWeight: FontWeights.semibold } }}>\r\n                {convertToTitleCase(l[0])}\r\n              </Text>\r\n            </Stack.Item>\r\n          ))}\r\n          <Stack.Item>&nbsp;</Stack.Item>\r\n        </Stack>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupLevelSlider;\r\n","import * as React from \"react\";\r\nimport {\r\n  Dropdown,\r\n  getId,\r\n  IDropdownOption,\r\n  Label,\r\n  Stack,\r\n} from \"@fluentui/react\";\r\nimport \"./App.css\";\r\nimport GroupedCollection from \"./collection/display/GroupedCollection\";\r\nimport EntryData from \"./collection/model/EntryData\";\r\nimport { TaxonomyLevel, TaxonomyLevels } from \"./collection/model/Taxonomy\";\r\nimport GroupLevelSlider from \"./collection/controls/GroupLevelSlider\";\r\n\r\nfunction App() {\r\n  const dummyEntryData: EntryData[] = [\r\n    {\r\n      name: \"Spider\",\r\n      taxonomy: {\r\n        kingdom: \"Animalia\",\r\n        phylum: \"Arthropoda\",\r\n        class: \"Arachnida\",\r\n        order: \"Araneae\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Scorpion\",\r\n      taxonomy: {\r\n        kingdom: \"Animalia\",\r\n        phylum: \"Arthropoda\",\r\n        class: \"Arachnida\",\r\n        order: \"Scorpiones\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Hawk\",\r\n      taxonomy: {\r\n        kingdom: \"Animalia\",\r\n        phylum: \"Chordata\",\r\n        class: \"Aves\",\r\n        order: \"Accipitriformes\",\r\n        family: \"Accipitridae\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Bluejay\",\r\n      taxonomy: {\r\n        kingdom: \"Animalia\",\r\n        phylum: \"Chordata\",\r\n        class: \"Aves\",\r\n        order: \"Passeriformes\",\r\n        family: \"Corvidae\",\r\n        genus: \"Cyanocitta\",\r\n        species: \"cristata\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Chickadee\",\r\n      taxonomy: {\r\n        kingdom: \"Animalia\",\r\n        phylum: \"Chordata\",\r\n        class: \"Aves\",\r\n        order: \"Passeriformes\",\r\n        family: \"Paridae\",\r\n        genus: \"Poecile\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Turtle\",\r\n      taxonomy: {\r\n        kingdom: \"Animalia\",\r\n        phylum: \"Chordata\",\r\n        class: \"Reptilia\",\r\n        order: \"Testudines\",\r\n      },\r\n    },\r\n  ];\r\n\r\n  const [\r\n    selectedGroupLevel,\r\n    setSelectedGroupLevel,\r\n  ] = React.useState<TaxonomyLevel>(\"kingdom\");\r\n\r\n  return (\r\n    <>\r\n      <Stack horizontal tokens={{ childrenGap: 10 }}>\r\n        <GroupLevelSlider\r\n          selectedLevel={selectedGroupLevel}\r\n          setSelectedLevel={setSelectedGroupLevel}\r\n        />\r\n      </Stack>\r\n      <GroupedCollection\r\n        entries={dummyEntryData}\r\n        groupLevel={selectedGroupLevel}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}