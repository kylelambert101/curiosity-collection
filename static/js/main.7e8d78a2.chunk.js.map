{"version":3,"sources":["collection/display/EntryCard.tsx","collection/model/Taxonomy.ts","collection/display/EntryCardStack.tsx","collection/display/GroupedCollection.tsx","utilities/StringUtilities.ts","collection/controls/GroupLevelSlider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EntryCard","props","entry","siteTextStyles","root","color","fontWeight","FontWeights","semibold","descriptionTextStyles","regular","Card","aria-label","horizontal","onClick","console","log","tokens","childrenMargin","Item","fill","Image","src","alt","Section","Text","variant","styles","name","id","JSON","stringify","taxonomy","undefined","TaxonomyLevels","EntryCardStack","groupLevel","entries","level","value","parentTaxa","map","l","values","e","filter","index","self","indexOf","_","t","style","length","Stack","wrap","childrenGap","GroupedCollection","groups","g","groupName","convertToTitleCase","str","split","word","toUpperCase","substr","toLowerCase","join","GroupLevelSlider","selectedLevel","setSelectedLevel","getLevelFromValue","className","width","Slider","label","min","max","defaultValue","valueFormat","showValue","snapToStep","onChange","paddingLeft","horizontalAlign","App","React","selectedGroupLevel","setSelectedGroupLevel","kingdom","phylum","class","order","family","genus","species","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e8d78a2.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Card } from \"@uifabric/react-cards\";\nimport { FontWeights, Image, Text, ITextStyles } from \"@fluentui/react\";\nimport EntryData from \"../model/EntryData\";\n\ninterface EntryCardProps {\n  entry: EntryData;\n}\n\nconst EntryCard = (props: EntryCardProps) => {\n  const { entry } = props;\n\n  const siteTextStyles: ITextStyles = {\n    root: {\n      color: \"#025F52\",\n      fontWeight: FontWeights.semibold,\n    },\n  };\n  const descriptionTextStyles: ITextStyles = {\n    root: {\n      color: \"#333333\",\n      fontWeight: FontWeights.regular,\n    },\n  };\n\n  return (\n    <Card\n      aria-label=\"Clickable horizontal card \"\n      horizontal\n      onClick={() => {\n        console.log(\"Clicked\");\n      }}\n      tokens={{ childrenMargin: 12 }}\n    >\n      <Card.Item fill>\n        <Image src=\"https://placehold.it/180x135\" alt=\"Placeholder image.\" />\n      </Card.Item>\n      <Card.Section>\n        <Text variant=\"medium\" styles={siteTextStyles}>\n          {entry.name}\n        </Text>\n        <Text styles={descriptionTextStyles}>\n          <pre id=\"json\">{JSON.stringify(entry.taxonomy, undefined, 2)}</pre>\n        </Text>\n      </Card.Section>\n    </Card>\n  );\n};\n\nexport default EntryCard;\n","export interface Taxonomy {\n  kingdom: string;\n  phylum?: string;\n  class?: string;\n  order?: string;\n  family?: string;\n  genus?: string;\n  species?: string;\n}\n\nexport type TaxonomyLevel = keyof Taxonomy;\n\n// There may be a better way to automatically sync this with the keys of\n// Taxonomy above, but this will work for now.\nexport const TaxonomyLevels: TaxonomyLevel[] = [\n  \"kingdom\",\n  \"phylum\",\n  \"class\",\n  \"order\",\n  \"family\",\n  \"genus\",\n  \"species\",\n];\n","import * as React from \"react\";\nimport EntryCard from \"./EntryCard\";\nimport EntryData from \"../model/EntryData\";\nimport { Stack } from \"@fluentui/react/lib/Stack\";\nimport { Text } from \"@fluentui/react\";\nimport { TaxonomyLevel, TaxonomyLevels } from \"../model/Taxonomy\";\n\ninterface EntryCardStackProps {\n  groupLevel: { level: TaxonomyLevel; value: string };\n  entries: EntryData[];\n}\n\nconst EntryCardStack = (props: EntryCardStackProps) => {\n  const { groupLevel, entries } = props;\n  const { level, value } = groupLevel;\n\n  const parentTaxa = TaxonomyLevels.map((l) => ({\n    level: l,\n    values: entries\n      .map((e) => e.taxonomy[l])\n      .filter((value, index, self) => self.indexOf(value) === index),\n  })).filter((_, index) => TaxonomyLevels.indexOf(level) > index);\n\n  return (\n    <div>\n      {parentTaxa.map((t) => (\n        <Text variant=\"mediumPlus\" style={{ color: \"#4C4A48\" }}>{`${\n          t.values.length === 1 ? t.values[0] : \"...\"\n        } > `}</Text>\n      ))}\n      <span style={{ fontWeight: \"bold\" }}>{value}</span>\n      <Stack horizontal wrap tokens={{ childrenGap: 10 }}>\n        {entries.map((e) => (\n          <EntryCard entry={e} />\n        ))}\n      </Stack>\n    </div>\n  );\n};\n\nexport default EntryCardStack;\n","import { Stack } from \"@fluentui/react/lib/Stack\";\nimport * as React from \"react\";\nimport EntryCardStack from \"./EntryCardStack\";\nimport EntryData from \"../model/EntryData\";\nimport EntryDataGroup from \"../model/EntryDataGroup\";\nimport { TaxonomyLevel } from \"../model/Taxonomy\";\n\ninterface GroupedCollectionProps {\n  entries: EntryData[];\n  groupLevel: TaxonomyLevel;\n}\n\nconst GroupedCollection = (\n  props: GroupedCollectionProps\n): React.ReactElement => {\n  const { entries, groupLevel } = props;\n\n  // Get unique entry values for that group and bundle associated entries\n  const groups: EntryDataGroup[] = entries\n    .map((e) => e.taxonomy[groupLevel])\n    .filter((value, index, self) => self.indexOf(value) === index)\n    .map((g) => ({\n      groupName: g || \"Not Specified\",\n      entries: entries.filter((e) => e.taxonomy[groupLevel] === g),\n    }));\n\n  return (\n    <Stack tokens={{ childrenGap: 10 }}>\n      {groups.map((g) => (\n        <EntryCardStack\n          entries={g.entries}\n          groupLevel={{ value: g.groupName, level: groupLevel }}\n        />\n      ))}\n    </Stack>\n  );\n};\n\nexport default GroupedCollection;\n","export const convertToTitleCase = (str: string) => {\n  return (\n    str\n      // Split on spaces\n      .split(\" \")\n      // Capitalize the first letter of each word\n      .map((word) =>\n        word.length > 0\n          ? word[0].toUpperCase() + word.substr(1).toLowerCase()\n          : word\n      )\n      // Join capitalized words back into one string\n      .join(\" \")\n  );\n};\n","import * as React from \"react\";\nimport { Slider, Stack } from \"@fluentui/react\";\nimport { FontWeights, Text } from \"@fluentui/react\";\nimport { convertToTitleCase } from \"../../utilities/StringUtilities\";\nimport { TaxonomyLevel, TaxonomyLevels } from \"../model/Taxonomy\";\n\ninterface GroupLevelSliderProps {\n  selectedLevel: TaxonomyLevel;\n  setSelectedLevel: (newLevel: TaxonomyLevel) => void;\n}\n\nconst GroupLevelSlider = (props: GroupLevelSliderProps): React.ReactElement => {\n  const { selectedLevel, setSelectedLevel } = props;\n\n  const getValueForLevel = (level: TaxonomyLevel): number => {\n    return TaxonomyLevels.indexOf(level);\n  };\n  const getLevelFromValue = (value: number): TaxonomyLevel => {\n    return TaxonomyLevels[value];\n  };\n\n  const width = \"30em\";\n\n  return (\n    <>\n      <div className=\"groupLevelSliderContainer\" style={{ width }}>\n        <Slider\n          label=\"Grouping Level\"\n          min={0}\n          max={TaxonomyLevels.length - 1}\n          defaultValue={getValueForLevel(selectedLevel)}\n          valueFormat={(value) => convertToTitleCase(getLevelFromValue(value))}\n          showValue\n          snapToStep\n          onChange={(value: number) =>\n            setSelectedLevel(getLevelFromValue(value))\n          }\n          styles={{ root: { paddingLeft: \"0.1em\" } }}\n        />\n        <Stack\n          horizontal\n          horizontalAlign=\"space-between\"\n          style={{ paddingLeft: \"0.4em\" }}\n        >\n          {TaxonomyLevels.map((l) => (\n            <Stack.Item>\n              <Text styles={{ root: { fontWeight: FontWeights.semibold } }}>\n                {convertToTitleCase(l[0])}\n              </Text>\n            </Stack.Item>\n          ))}\n          <Stack.Item>&nbsp;</Stack.Item>\n        </Stack>\n      </div>\n    </>\n  );\n};\n\nexport default GroupLevelSlider;\n","import * as React from \"react\";\nimport { Stack } from \"@fluentui/react\";\nimport \"./App.css\";\nimport GroupedCollection from \"./collection/display/GroupedCollection\";\nimport EntryData from \"./collection/model/EntryData\";\nimport { TaxonomyLevel } from \"./collection/model/Taxonomy\";\nimport GroupLevelSlider from \"./collection/controls/GroupLevelSlider\";\n\nfunction App() {\n  const dummyEntryData: EntryData[] = [\n    {\n      name: \"Spider\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Arthropoda\",\n        class: \"Arachnida\",\n        order: \"Araneae\",\n      },\n    },\n    {\n      name: \"Scorpion\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Arthropoda\",\n        class: \"Arachnida\",\n        order: \"Scorpiones\",\n      },\n    },\n    {\n      name: \"Hawk\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Aves\",\n        order: \"Accipitriformes\",\n        family: \"Accipitridae\",\n      },\n    },\n    {\n      name: \"Bluejay\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Aves\",\n        order: \"Passeriformes\",\n        family: \"Corvidae\",\n        genus: \"Cyanocitta\",\n        species: \"cristata\",\n      },\n    },\n    {\n      name: \"Chickadee\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Aves\",\n        order: \"Passeriformes\",\n        family: \"Paridae\",\n        genus: \"Poecile\",\n      },\n    },\n    {\n      name: \"Turtle\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Reptilia\",\n        order: \"Testudines\",\n      },\n    },\n  ];\n\n  const [\n    selectedGroupLevel,\n    setSelectedGroupLevel,\n  ] = React.useState<TaxonomyLevel>(\"kingdom\");\n\n  return (\n    <>\n      <Stack horizontal tokens={{ childrenGap: 10 }}>\n        <GroupLevelSlider\n          selectedLevel={selectedGroupLevel}\n          setSelectedLevel={setSelectedGroupLevel}\n        />\n      </Stack>\n      <GroupedCollection\n        entries={dummyEntryData}\n        groupLevel={selectedGroupLevel}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}