{"version":3,"sources":["collection/EntryCard.tsx","collection/EntryCardStack.tsx","collection/GroupedCollection.tsx","collection/model/Taxonomy.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EntryCard","props","entry","siteTextStyles","root","color","fontWeight","FontWeights","semibold","descriptionTextStyles","regular","Card","aria-label","horizontal","onClick","console","log","tokens","childrenMargin","Item","fill","Image","src","alt","Section","Text","variant","styles","name","id","JSON","stringify","taxonomy","undefined","EntryCardStack","header","entries","style","Stack","wrap","childrenGap","map","e","GroupedCollection","groupLevel","groups","filter","value","index","self","indexOf","g","groupName","TaxonomyLevels","App","React","selectedItem","setSelectedItem","levelDropdownId","getId","Label","htmlFor","Dropdown","selectedKey","key","options","level","text","width","onChange","event","item","kingdom","phylum","class","order","family","genus","species","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAiDeA,EAxCG,SAACC,GAA2B,IACpCC,EAAUD,EAAVC,MAEFC,EAA8B,CAClCC,KAAM,CACJC,MAAO,UACPC,WAAYC,IAAYC,WAGtBC,EAAqC,CACzCL,KAAM,CACJC,MAAO,UACPC,WAAYC,IAAYG,UAI5B,OACE,eAACC,EAAA,EAAD,CACEC,aAAW,6BACXC,YAAU,EACVC,QAAS,WACPC,QAAQC,IAAI,YAEdC,OAAQ,CAAEC,eAAgB,IAN5B,UAQE,cAACP,EAAA,EAAKQ,KAAN,CAAWC,MAAI,EAAf,SACE,cAACC,EAAA,EAAD,CAAOC,IAAI,+BAA+BC,IAAI,yBAEhD,eAACZ,EAAA,EAAKa,QAAN,WACE,cAACC,EAAA,EAAD,CAAMC,QAAQ,SAASC,OAAQxB,EAA/B,SACGD,EAAM0B,OAET,cAACH,EAAA,EAAD,CAAME,OAAQlB,EAAd,SACE,qBAAKoB,GAAG,OAAR,SAAgBC,KAAKC,UAAU7B,EAAM8B,cAAUC,EAAW,cClBrDC,EAdQ,SAACjC,GAAgC,IAC9CkC,EAAoBlC,EAApBkC,OAAQC,EAAYnC,EAAZmC,QAChB,OACE,gCACE,sBAAMC,MAAO,CAAE/B,WAAY,QAA3B,SAAsC6B,IACtC,cAACG,EAAA,EAAD,CAAOzB,YAAU,EAAC0B,MAAI,EAACtB,OAAQ,CAAEuB,YAAa,IAA9C,SACGJ,EAAQK,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,CAAWxC,MAAOwC,aCkBbC,EAvBW,SACxB1C,GACwB,IAChBmC,EAAwBnC,EAAxBmC,QAASQ,EAAe3C,EAAf2C,WAGXC,EAA2BT,EAC9BK,KAAI,SAACC,GAAD,OAAOA,EAAEV,SAASY,MACtBE,QAAO,SAACC,EAAOC,EAAOC,GAAf,OAAwBA,EAAKC,QAAQH,KAAWC,KACvDP,KAAI,SAACU,GAAD,MAAQ,CACXC,UAAWD,GAAK,gBAChBf,QAASA,EAAQU,QAAO,SAACJ,GAAD,OAAOA,EAAEV,SAASY,KAAgBO,SAG9D,OACE,cAACb,EAAA,EAAD,CAAOrB,OAAQ,CAAEuB,YAAa,IAA9B,SACGK,EAAOJ,KAAI,SAACU,GAAD,OACV,cAAC,EAAD,CAAgBf,QAASe,EAAEf,QAASD,OAAQgB,EAAEC,kBCfzCC,EAAiB,CAC5B,UACA,SACA,QACA,QACA,SACA,QACA,WCuFaC,MA/Ff,WACE,IADa,EAgE2BC,aAhE3B,mBAgENC,EAhEM,KAgEQC,EAhER,KAyEPC,EAAkBC,YAAM,iBAE9B,OACE,qCACE,eAACrB,EAAA,EAAD,CAAOzB,YAAU,EAACI,OAAQ,CAAEuB,YAAa,IAAzC,UACE,cAACoB,EAAA,EAAD,CAAOC,QAASH,EAAhB,6BACA,cAACI,EAAA,EAAD,CAEEC,YAAaP,EAAeA,EAAaQ,SAAM/B,EAC/CgC,QAASZ,EAAeZ,KAAI,SAACyB,GAAD,MAAY,CAAEF,IAAKE,EAAOC,KAAMD,MAC5D7B,MAAO,CAAE+B,MAAO,KAChBC,SAlBS,SACfC,EACAC,GAEAd,EAAgBc,KAULb,MAOT,cAAC,EAAD,CACEtB,QAvF8B,CAClC,CACER,KAAM,SACNI,SAAU,CACRwC,QAAS,WACTC,OAAQ,aACRC,MAAO,YACPC,MAAO,YAGX,CACE/C,KAAM,WACNI,SAAU,CACRwC,QAAS,WACTC,OAAQ,aACRC,MAAO,YACPC,MAAO,eAGX,CACE/C,KAAM,OACNI,SAAU,CACRwC,QAAS,WACTC,OAAQ,WACRC,MAAO,OACPC,MAAO,kBACPC,OAAQ,iBAGZ,CACEhD,KAAM,UACNI,SAAU,CACRwC,QAAS,WACTC,OAAQ,WACRC,MAAO,OACPC,MAAO,gBACPC,OAAQ,WACRC,MAAO,aACPC,QAAS,aAGb,CACElD,KAAM,YACNI,SAAU,CACRwC,QAAS,WACTC,OAAQ,WACRC,MAAO,OACPC,MAAO,gBACPC,OAAQ,UACRC,MAAO,YAGX,CACEjD,KAAM,SACNI,SAAU,CACRwC,QAAS,WACTC,OAAQ,WACRC,MAAO,WACPC,MAAO,gBA8BP/B,YAAyB,OAAZY,QAAY,IAAZA,OAAA,EAAAA,EAAcW,OAAQ,gBCxF5BY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bf763e98.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Card } from \"@uifabric/react-cards\";\r\nimport { FontWeights, Image, Text, ITextStyles } from \"@fluentui/react\";\r\nimport EntryData from \"./model/EntryData\";\r\n\r\ninterface EntryCardProps {\r\n  entry: EntryData;\r\n}\r\n\r\nconst EntryCard = (props: EntryCardProps) => {\r\n  const { entry } = props;\r\n\r\n  const siteTextStyles: ITextStyles = {\r\n    root: {\r\n      color: \"#025F52\",\r\n      fontWeight: FontWeights.semibold,\r\n    },\r\n  };\r\n  const descriptionTextStyles: ITextStyles = {\r\n    root: {\r\n      color: \"#333333\",\r\n      fontWeight: FontWeights.regular,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      aria-label=\"Clickable horizontal card \"\r\n      horizontal\r\n      onClick={() => {\r\n        console.log(\"Clicked\");\r\n      }}\r\n      tokens={{ childrenMargin: 12 }}\r\n    >\r\n      <Card.Item fill>\r\n        <Image src=\"https://placehold.it/180x135\" alt=\"Placeholder image.\" />\r\n      </Card.Item>\r\n      <Card.Section>\r\n        <Text variant=\"medium\" styles={siteTextStyles}>\r\n          {entry.name}\r\n        </Text>\r\n        <Text styles={descriptionTextStyles}>\r\n          <pre id=\"json\">{JSON.stringify(entry.taxonomy, undefined, 2)}</pre>\r\n        </Text>\r\n      </Card.Section>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EntryCard;\r\n","import * as React from \"react\";\r\nimport EntryCard from \"./EntryCard\";\r\nimport EntryData from \"./model/EntryData\";\r\nimport { Stack } from \"@fluentui/react/lib/Stack\";\r\n\r\ninterface EntryCardStackProps {\r\n  header: string;\r\n  entries: EntryData[];\r\n}\r\n\r\nconst EntryCardStack = (props: EntryCardStackProps) => {\r\n  const { header, entries } = props;\r\n  return (\r\n    <div>\r\n      <span style={{ fontWeight: \"bold\" }}>{header}</span>\r\n      <Stack horizontal wrap tokens={{ childrenGap: 10 }}>\r\n        {entries.map((e) => (\r\n          <EntryCard entry={e} />\r\n        ))}\r\n      </Stack>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EntryCardStack;\r\n","import { Stack } from \"@fluentui/react/lib/Stack\";\r\nimport * as React from \"react\";\r\nimport EntryCardStack from \"./EntryCardStack\";\r\nimport EntryData from \"./model/EntryData\";\r\nimport EntryDataGroup from \"./model/EntryDataGroup\";\r\nimport { TaxonomyLevel } from \"./model/Taxonomy\";\r\n\r\ninterface GroupedCollectionProps {\r\n  entries: EntryData[];\r\n  groupLevel: TaxonomyLevel;\r\n}\r\n\r\nconst GroupedCollection = (\r\n  props: GroupedCollectionProps\r\n): React.ReactElement => {\r\n  const { entries, groupLevel } = props;\r\n\r\n  // Get unique entry values for that group and bundle associated entries\r\n  const groups: EntryDataGroup[] = entries\r\n    .map((e) => e.taxonomy[groupLevel])\r\n    .filter((value, index, self) => self.indexOf(value) === index)\r\n    .map((g) => ({\r\n      groupName: g || \"Not Specified\",\r\n      entries: entries.filter((e) => e.taxonomy[groupLevel] === g),\r\n    }));\r\n\r\n  return (\r\n    <Stack tokens={{ childrenGap: 10 }}>\r\n      {groups.map((g) => (\r\n        <EntryCardStack entries={g.entries} header={g.groupName} />\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default GroupedCollection;\r\n","export interface Taxonomy {\r\n  kingdom: string;\r\n  phylum?: string;\r\n  class?: string;\r\n  order?: string;\r\n  family?: string;\r\n  genus?: string;\r\n  species?: string;\r\n}\r\n\r\nexport type TaxonomyLevel = keyof Taxonomy;\r\n\r\n// There may be a better way to automatically sync this with the keys of\r\n// Taxonomy above, but this will work for now.\r\nexport const TaxonomyLevels = [\r\n  \"kingdom\",\r\n  \"phylum\",\r\n  \"class\",\r\n  \"order\",\r\n  \"family\",\r\n  \"genus\",\r\n  \"species\",\r\n];\r\n","import * as React from \"react\";\nimport {\n  Dropdown,\n  getId,\n  IDropdownOption,\n  Label,\n  Stack,\n} from \"@fluentui/react\";\nimport \"./App.css\";\nimport GroupedCollection from \"./collection/GroupedCollection\";\nimport EntryData from \"./collection/model/EntryData\";\nimport { TaxonomyLevel, TaxonomyLevels } from \"./collection/model/Taxonomy\";\n\nfunction App() {\n  const dummyEntryData: EntryData[] = [\n    {\n      name: \"Spider\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Arthropoda\",\n        class: \"Arachnida\",\n        order: \"Araneae\",\n      },\n    },\n    {\n      name: \"Scorpion\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Arthropoda\",\n        class: \"Arachnida\",\n        order: \"Scorpiones\",\n      },\n    },\n    {\n      name: \"Hawk\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Aves\",\n        order: \"Accipitriformes\",\n        family: \"Accipitridae\",\n      },\n    },\n    {\n      name: \"Bluejay\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Aves\",\n        order: \"Passeriformes\",\n        family: \"Corvidae\",\n        genus: \"Cyanocitta\",\n        species: \"cristata\",\n      },\n    },\n    {\n      name: \"Chickadee\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Aves\",\n        order: \"Passeriformes\",\n        family: \"Paridae\",\n        genus: \"Poecile\",\n      },\n    },\n    {\n      name: \"Turtle\",\n      taxonomy: {\n        kingdom: \"Animalia\",\n        phylum: \"Chordata\",\n        class: \"Reptilia\",\n        order: \"Testudines\",\n      },\n    },\n  ];\n\n  const [selectedItem, setSelectedItem] = React.useState<IDropdownOption>();\n\n  const onChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setSelectedItem(item);\n  };\n\n  const levelDropdownId = getId(\"levelDropdown\");\n\n  return (\n    <>\n      <Stack horizontal tokens={{ childrenGap: 10 }}>\n        <Label htmlFor={levelDropdownId}>Grouping Level:</Label>\n        <Dropdown\n          key={levelDropdownId}\n          selectedKey={selectedItem ? selectedItem.key : undefined}\n          options={TaxonomyLevels.map((level) => ({ key: level, text: level }))}\n          style={{ width: 300 }}\n          onChange={onChange}\n        />\n      </Stack>\n      <GroupedCollection\n        entries={dummyEntryData}\n        groupLevel={(selectedItem?.text || \"kingdom\") as TaxonomyLevel}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}